import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { addNewData, getData } from './API';


const PER_PAGE = 5;
// update type later
export interface HomeState {
  data: any;
  page: number;
  dataShow: any;
  maxPage: number;
}

const initialState: HomeState = {
  data: [],
  page: 0,
  maxPage: 0,
  dataShow: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getDataEmployess(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataEmployess = createAsyncThunk(
  'Home/fetchCount',
  async () => {
    try {
      const response = await getData();
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch {
      return []
    }
  }
);

export const addNewEmployess = createAsyncThunk(
  'Home/addCount',
  async (params) => {
    try {
      const response = await addNewData(params);
      return response.data;
    } catch {
      return []
    }
  }
);

export const HomeSlice = createSlice({
  name: 'Home',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementPage: (state) => {
      let newPage = state.page + 1;
      state.page = newPage;
      state.dataShow = state.data.slice(newPage*PER_PAGE, newPage*PER_PAGE + 5);
    },

    decrementPage: (state) => {
      let newPage = state.page - 1;
      state.page = newPage;
      state.dataShow = state.data.slice(newPage*PER_PAGE, newPage*PER_PAGE + 5);
    },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addNewEmployess.pending, (state) => {
      })
      .addCase(addNewEmployess.fulfilled, (state, action) => {
        const newData = [
          ...state.data,
          action.payload
        ];
        state.data = newData
        state.maxPage = Math.ceil(newData.length/PER_PAGE);
      })
      .addCase(getDataEmployess.pending, (state) => {
      })
      .addCase(getDataEmployess.fulfilled, (state, action) => {
        state.data = action.payload;
        state.maxPage = Math.ceil(action.payload.length/PER_PAGE);
        state.dataShow = state.data.slice(state.page*PER_PAGE, state.page*PER_PAGE + 5);
      });
  },
});

export const { incrementPage, decrementPage } = HomeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.Home.value)`
export const selectData = (state: RootState) => state.home.dataShow;

export const selectMaxPage = (state: RootState) => state.home.maxPage;
export const selectCurentPage = (state: RootState) => state.home.page;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectData(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default HomeSlice.reducer;
